import js from "@eslint/js";
import globals from "globals";

import { FlatConfigItemStrict } from "../types";

export default [
  { name: "js/recommended", ...js.configs.recommended },
  {
    name: "lichthagel/javascript",
    languageOptions: {
      ecmaVersion: 2022,
      globals: {
        ...globals.es2022,
      },
      parserOptions: {
        ecmaVersion: 2022,
        sourceType: "module",
      },
      sourceType: "module",
    },
    rules: {
      "accessor-pairs": "error",
      "array-callback-return": "error",
      "arrow-body-style": "error",
      "block-scoped-var": "error",
      "curly": ["error", "all"],
      "default-case-last": "error",
      "dot-notation": "error",
      "eqeqeq": ["error", "smart"],
      "new-cap": [
        "error",
        {
          capIsNew: false,
          newIsCap: true,
          properties: true,
        },
      ],
      "no-alert": "error",
      "no-array-constructor": "error",
      "no-await-in-loop": "error",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-cond-assign": ["error", "always"],
      "no-console": ["error", { allow: ["warn", "error"] }],
      "no-duplicate-imports": "error",
      "no-eval": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-implied-eval": "error",
      "no-iterator": "error",
      "no-label-var": "error",
      "no-labels": "error",
      "no-lone-blocks": "error",
      "no-multi-assign": "error",
      "no-multi-str": "error",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-octal-escape": "error",
      "no-promise-executor-return": ["error", { allowVoid: true }],
      "no-proto": "error",
      "no-restricted-globals": ["error", { name: "global", message: "Use `globalThis` instead." }, { name: "self", message: "Use `globalThis` instead." }],
      "no-restricted-properties": [
        "error",
        { message: "Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.", property: "__proto__" },
        { message: "Use `Object.defineProperty` instead.", property: "__defineGetter__" },
        { message: "Use `Object.defineProperty` instead.", property: "__defineSetter__" },
        { message: "Use `Object.getOwnPropertyDescriptor` instead.", property: "__lookupGetter__" },
        { message: "Use `Object.getOwnPropertyDescriptor` instead.", property: "__lookupSetter__" },
      ],
      "no-restricted-syntax": [
        "error",
        "DebuggerStatement",
        "LabeledStatement",
        "WithStatement",
        "TSEnumDeclaration[const=true]",
        "TSExportAssignment",
      ],
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-template-curly-in-string": "error",
      "no-throw-literal": "error",
      "no-undef-init": "error",
      "no-unmodified-loop-condition": "error",
      "no-unneeded-ternary": "error",
      "no-unreachable-loop": "error",
      "no-unused-expressions": ["error", { allowShortCircuit: true, allowTaggedTemplates: true, allowTernary: true }],
      "no-useless-call": "error",
      "no-useless-computed-key": "error",
      "no-useless-concat": "error",
      "no-useless-constructor": "error",
      "no-useless-rename": "error",
      "no-useless-return": "error",
      "no-var": "error",
      "object-shorthand": ["error", "always", { ignoreConstructors: false }],
      "prefer-arrow-callback": "error",
      "prefer-const": "error",
      "prefer-destructuring": ["error", { AssignmentExpression: { array: false, object: false } }],
      "prefer-exponentiation-operator": "error",
      "prefer-object-spread": "error",
      "prefer-promise-reject-errors": "error",
      "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "require-await": "error",
      "sort-imports": [
        "error",
        {
          allowSeparatedGroups: true,
          ignoreCase: false,
          ignoreDeclarationSort: true,
        },
      ],
      "symbol-description": "error",
      "use-isnan": ["error", { enforceForIndexOf: true, enforceForSwitchCase: true }],
      "valid-typeof": ["error", { requireStringLiterals: true }],
      "yoda": "error",
    },
  },
] satisfies FlatConfigItemStrict[] as FlatConfigItemStrict[];
